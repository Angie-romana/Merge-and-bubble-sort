/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package estructuradatos1;



/**
 *
 * @author Mitsuki
 */
public class EstructuraDatos1 {

     int[]merge(int[]a,int[]b){
       int[]c=new int[a.length + b.length];
       int i, j=0,k=0;
       for (i = 0; i < c.length && j<a.length && k<b.length; i++) {
           if (a[j]<b[k]){
               c[i]=a[j++];   
           }else{
               c[i]=b[k++];
           }
       }
       for (; i < c.length; i++) {
           if(j<a.length){
               c[i]=a[j++];
           }
           if(k<b.length){
               c[i]=b[k++];
           }  
       }
      return c; 
   }
     public int [] mergeSort(int[] arr){
        // caso base
        if(arr.length == 1)
            return arr;

        int[] parteInferior = new int[arr.length/2];
        int[] parteSuperior = new int[arr.length - parteInferior.length];
        int i = 0;

        for (; i < parteInferior.length; i++) {
            parteInferior[i] = arr[i];
        }

        for (int j = 0; j < parteSuperior.length; j++) {
            parteSuperior[j] = arr[i+j];
        }

        // parte recursiva del caso recursivo

        return merge(mergeSort(parteInferior), mergeSort(parteSuperior));
    }
     
  

public static int NumeroAleatorio(int minimo, int maximo){
        int R= maximo-minimo +1;
        int rand=(int)(Math.random()* R)+ minimo;
        return rand;
    }

    public static void main(String[] args) {
 int na=0;

   
/*int arr[]={ 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745,
            23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745,
            23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745,
            23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745,
            23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745,
            23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745,
            23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745,
            23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745,
            23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745,
            23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745,
            23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745, 23,500,34,52,87,78,96,102,7458,68,12,54,1,754,154,285,84,1,8,745};*/
            
    /* for (int i = 0; i < arr.length; i++) {
             na=NumeroAleatorio(1,400);
            arr[i]=na;
        }*/
   int arr[]={2,56,43,79,0,125,10,22,11,9};
    
        System.out.println("Array Before Merge sort");
        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]+"");
        }
        System.out.println();
  EstructuraDatos1 m = new EstructuraDatos1();
arr = m.mergeSort(arr);
                System.out.println(" Array befor Merge sort");
            for (int i = 0; i < arr.length; i++) {
                System.out.println(arr[i]+" ");
            
        }
             long startTime = System.nanoTime();
  long endTime = System.nanoTime() - startTime;
           System.out.println("Arreglo de  tamaÃ±o 10 con MergeSort");
        System.out.println("tiempo en nano segundos:" + endTime);
        }
            
        }

    
